/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import database.Database;
import java.awt.Window;
import java.io.File;
import java.io.IOException;

import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import model.Mahasiswa;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import model.MahasiswaDAO;

/**
 *
 * @author Ayaa
 */
public class ViewExport extends javax.swing.JPanel {
    private DefaultTableModel model;

    public ViewExport() throws SQLException {
        initComponents(); 
        String[] columnNames = {"Email", "Nama", "NIM", "Kelas", "Telepon", "Jenis Kelamin", "Tanggal Kunjungan"};
        model = new DefaultTableModel(columnNames, 0);
        mhsTable.setModel(model);
        fetchDataAndDisplay();
    }
    

    private void fetchDataAndDisplay() throws SQLException {
        MahasiswaDAO dao = new MahasiswaDAO();
        List<Mahasiswa> mahasiswas = dao.getALL();

        for (Mahasiswa mhs : mahasiswas) {
            Object[] row = {
                mhs.getEmail(),
                mhs.getNama(),
                mhs.getNim(),
                mhs.getKelas(),
                mhs.getTelp(),
                mhs.getJk(),
                mhs.getTgl() 
            };
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mhsTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        csvLabel = new javax.swing.JLabel();
        pdfLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 204, 102));
        setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N

        mhsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Email", "Nama", "Nim", "Kelas", "Telepon", "Jenis Kelamin", "Tanggal Kunjungan"
            }
        ));
        jScrollPane1.setViewportView(mhsTable);

        backButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        csvLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        csvLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_csv_20px.png"))); // NOI18N
        csvLabel.setText("CSV");
        csvLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                csvLabelMouseClicked(evt);
            }
        });

        pdfLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        pdfLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8_pdf_20px_1.png"))); // NOI18N
        pdfLabel.setText("PDF");
        pdfLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pdfLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 724, Short.MAX_VALUE)
                        .addComponent(pdfLabel)
                        .addGap(32, 32, 32)
                        .addComponent(csvLabel)
                        .addGap(32, 32, 32))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1003, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(backButton)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pdfLabel)
                            .addComponent(csvLabel))
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                .addGap(105, 105, 105))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        ViewAdmin viewAdmin = new ViewAdmin();
        JFrame frame = new JFrame("DashboardAdmin");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(viewAdmin);
        frame.pack();
        frame.setVisible(true);
        ((Window) this.getTopLevelAncestor()).dispose(); // Close current reg
    }//GEN-LAST:event_backButtonActionPerformed

    private void csvLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_csvLabelMouseClicked
        // TODO add your handling code here:
         // Export to CSV action
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String filePath = file.getPath();
            try {
                Database.exportMahasiswaToCSV(filePath);
                showMessage("Data mahasiswa berhasil diekspor ke CSV.", "Export CSV");
            } catch (SQLException | IOException ex) {
                Logger.getLogger(ViewExport.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Error: Gagal mengekspor data mahasiswa ke CSV.", "Error");
            }
        }
    }//GEN-LAST:event_csvLabelMouseClicked

    private void pdfLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pdfLabelMouseClicked
        // TODO add your handling code here:
        // Export to PDF action
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showSaveDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String filePath = file.getPath();
            try {
                Database.exportMahasiswaToPDF(filePath); // Memanggil metode ekspor ke PDF dari Database
                showMessage("Data mahasiswa berhasil diekspor ke PDF.", "Export PDF");
            } catch (SQLException | IOException ex) {
                Logger.getLogger(ViewExport.class.getName()).log(Level.SEVERE, null, ex);
                showMessage("Error: Gagal mengekspor data mahasiswa ke PDF.", "Error");
            }
        }
    }//GEN-LAST:event_pdfLabelMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel csvLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable mhsTable;
    private javax.swing.JLabel pdfLabel;
    // End of variables declaration//GEN-END:variables

    
    public JButton getBackButton() {
        return backButton;
    }

    public JLabel getCsvLabel() {
        return csvLabel;
    }

    public JTable getMhsTable() {
        return mhsTable;
    }

    public JLabel getPdfLabel() {
        return pdfLabel;
    }
    
        // Method to display a message dialog
    public void showMessage(String message, String title) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);
    }  
    
    
}   

